-- =====================================================
-- SCRIPT DE VALIDACI√ìN DE MIGRACIONES
-- Ejecutar despu√©s de aplicar todas las migraciones
-- Verifica que la estructura est√© completa y funcional
-- =====================================================

\echo 'üîç Iniciando validaci√≥n de migraciones...'

-- =====================================================
-- VALIDACI√ìN 1: EXTENSIONES
-- =====================================================
\echo 'üì¶ Verificando extensiones...'

SELECT 
    extname as extension_name,
    CASE 
        WHEN extname IN ('uuid-ossp', 'pgcrypto', 'btree_gin') THEN '‚úÖ'
        ELSE '‚ùå'
    END as status
FROM pg_extension 
WHERE extname IN ('uuid-ossp', 'pgcrypto', 'btree_gin')
ORDER BY extname;

-- =====================================================
-- VALIDACI√ìN 2: ENUMS
-- =====================================================
\echo 'üè∑Ô∏è  Verificando tipos enumerados...'

SELECT 
    typname as enum_name,
    array_agg(enumlabel ORDER BY enumsortorder) as values,
    '‚úÖ' as status
FROM pg_type t
JOIN pg_enum e ON t.oid = e.enumtypid
WHERE typname IN ('user_role', 'task_status', 'task_priority', 'notification_type', 'notification_status', 'notification_channel')
GROUP BY typname
ORDER BY typname;

-- =====================================================
-- VALIDACI√ìN 3: TABLAS
-- =====================================================
\echo 'üìã Verificando tablas...'

WITH expected_tables AS (
    SELECT unnest(ARRAY[
        'users', 'teams', 'team_memberships', 'task_categories', 'tasks', 
        'task_assignments', 'notifications', 'notification_templates',
        'activity_logs', 'user_sessions', 'system_settings', 'generated_reports',
        'task_comments', 'task_attachments'
    ]) as table_name
)
SELECT 
    et.table_name,
    CASE 
        WHEN t.table_name IS NOT NULL THEN '‚úÖ'
        ELSE '‚ùå FALTANTE'
    END as status,
    COALESCE(
        (SELECT column_count FROM information_schema.tables it WHERE it.table_name = et.table_name), 
        0
    ) as column_count
FROM expected_tables et
LEFT JOIN information_schema.tables t ON et.table_name = t.table_name 
    AND t.table_schema = 'public' 
    AND t.table_type = 'BASE TABLE'
ORDER BY et.table_name;

-- =====================================================
-- VALIDACI√ìN 4: FOREIGN KEYS
-- =====================================================
\echo 'üîó Verificando foreign keys...'

SELECT 
    tc.table_name,
    tc.constraint_name,
    kcu.column_name,
    ccu.table_name AS referenced_table,
    ccu.column_name AS referenced_column,
    '‚úÖ' as status
FROM information_schema.table_constraints tc
JOIN information_schema.key_column_usage kcu 
    ON tc.constraint_name = kcu.constraint_name
JOIN information_schema.constraint_column_usage ccu 
    ON ccu.constraint_name = tc.constraint_name
WHERE tc.constraint_type = 'FOREIGN KEY'
    AND tc.table_schema = 'public'
ORDER BY tc.table_name, tc.constraint_name;

-- =====================================================
-- VALIDACI√ìN 5: √çNDICES
-- =====================================================
\echo 'üìá Verificando √≠ndices...'

SELECT 
    schemaname,
    tablename,
    indexname,
    CASE 
        WHEN indexname LIKE 'idx_%' THEN '‚úÖ'
        WHEN indexname LIKE '%_pkey' THEN 'üîë PK'
        WHEN indexname LIKE '%_key' THEN 'üîë UK'
        ELSE 'üìá'
    END as status
FROM pg_indexes 
WHERE schemaname = 'public'
    AND tablename IN (
        'users', 'teams', 'team_memberships', 'task_categories', 'tasks', 
        'task_assignments', 'notifications', 'notification_templates',
        'activity_logs', 'user_sessions', 'system_settings', 'generated_reports',
        'task_comments', 'task_attachments'
    )
ORDER BY tablename, indexname;

-- =====================================================
-- VALIDACI√ìN 6: TRIGGERS
-- =====================================================
\echo '‚ö° Verificando triggers...'

SELECT 
    trigger_name,
    event_object_table as table_name,
    action_timing,
    event_manipulation,
    '‚úÖ' as status
FROM information_schema.triggers 
WHERE trigger_schema = 'public'
    AND trigger_name NOT LIKE 'RI_%'  -- Excluir triggers de RI internos
ORDER BY event_object_table, trigger_name;

-- =====================================================
-- VALIDACI√ìN 7: FUNCIONES
-- =====================================================
\echo 'üîß Verificando funciones...'

SELECT 
    routine_name as function_name,
    routine_type,
    data_type as return_type,
    '‚úÖ' as status
FROM information_schema.routines 
WHERE routine_schema = 'public' 
    AND routine_type = 'FUNCTION'
    AND routine_name NOT LIKE 'pg_%'
ORDER BY routine_name;

-- =====================================================
-- VALIDACI√ìN 8: VISTAS
-- =====================================================
\echo 'üëÅÔ∏è  Verificando vistas...'

WITH expected_views AS (
    SELECT unnest(ARRAY[
        'user_statistics', 'task_statistics', 'team_summary', 'dashboard_metrics'
    ]) as view_name
)
SELECT 
    ev.view_name,
    CASE 
        WHEN v.table_name IS NOT NULL THEN '‚úÖ'
        ELSE '‚ùå FALTANTE'
    END as status
FROM expected_views ev
LEFT JOIN information_schema.views v ON ev.view_name = v.table_name 
    AND v.table_schema = 'public'
ORDER BY ev.view_name;

-- =====================================================
-- VALIDACI√ìN 9: ROW LEVEL SECURITY
-- =====================================================
\echo 'üîí Verificando Row Level Security...'

SELECT 
    schemaname,
    tablename,
    rowsecurity as rls_enabled,
    CASE 
        WHEN rowsecurity THEN '‚úÖ RLS Habilitado'
        ELSE '‚ùå RLS Deshabilitado'
    END as status
FROM pg_tables 
WHERE schemaname = 'public'
    AND tablename IN ('users', 'tasks', 'task_assignments', 'notifications', 'activity_logs', 'task_comments', 'task_attachments')
ORDER BY tablename;

-- =====================================================
-- VALIDACI√ìN 10: POL√çTICAS RLS
-- =====================================================
\echo 'üõ°Ô∏è  Verificando pol√≠ticas RLS...'

SELECT 
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    '‚úÖ' as status
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- =====================================================
-- VALIDACI√ìN 11: DATOS INICIALES
-- =====================================================
\echo 'üíæ Verificando datos iniciales...'

-- Verificar configuraciones del sistema
SELECT 
    'system_settings' as table_name,
    COUNT(*) as record_count,
    CASE 
        WHEN COUNT(*) >= 10 THEN '‚úÖ'
        ELSE '‚ö†Ô∏è Pocos registros'
    END as status
FROM system_settings;

-- Verificar categor√≠as de tareas
SELECT 
    'task_categories' as table_name,
    COUNT(*) as record_count,
    CASE 
        WHEN COUNT(*) >= 5 THEN '‚úÖ'
        ELSE '‚ö†Ô∏è Pocos registros'
    END as status
FROM task_categories;

-- Verificar templates de notificaci√≥n
SELECT 
    'notification_templates' as table_name,
    COUNT(*) as record_count,
    CASE 
        WHEN COUNT(*) >= 5 THEN '‚úÖ'
        ELSE '‚ö†Ô∏è Pocos registros'
    END as status
FROM notification_templates;

-- =====================================================
-- VALIDACI√ìN 12: CONSTRAINTS Y CHECKS
-- =====================================================
\echo '‚úÖ Verificando constraints...'

SELECT 
    tc.table_name,
    tc.constraint_name,
    tc.constraint_type,
    CASE 
        WHEN tc.constraint_type = 'CHECK' THEN '‚úÖ CHECK'
        WHEN tc.constraint_type = 'UNIQUE' THEN 'üîë UNIQUE'
        WHEN tc.constraint_type = 'PRIMARY KEY' THEN 'üóùÔ∏è PRIMARY KEY'
        ELSE tc.constraint_type
    END as status
FROM information_schema.table_constraints tc
WHERE tc.table_schema = 'public'
    AND tc.constraint_type IN ('CHECK', 'UNIQUE', 'PRIMARY KEY')
ORDER BY tc.table_name, tc.constraint_type, tc.constraint_name;

-- =====================================================
-- VALIDACI√ìN 13: PRUEBAS FUNCIONALES B√ÅSICAS
-- =====================================================
\echo 'üß™ Ejecutando pruebas funcionales...'

-- Verificar que se puede llamar a la funci√≥n de estad√≠sticas
DO $$
DECLARE
    result RECORD;
    uuid_test UUID := 'a0000000-0000-0000-0000-000000000000';
BEGIN
    SELECT * INTO result FROM calculate_user_stats(uuid_test);
    RAISE NOTICE '‚úÖ Funci√≥n calculate_user_stats ejecutada correctamente';
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Error en funci√≥n calculate_user_stats: %', SQLERRM;
END $$;

-- Verificar que las vistas funcionan
DO $$
DECLARE
    rec_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO rec_count FROM user_statistics;
    RAISE NOTICE '‚úÖ Vista user_statistics: % registros', rec_count;
    
    SELECT COUNT(*) INTO rec_count FROM task_statistics;
    RAISE NOTICE '‚úÖ Vista task_statistics: % registros', rec_count;
    
    SELECT COUNT(*) INTO rec_count FROM team_summary;
    RAISE NOTICE '‚úÖ Vista team_summary: % registros', rec_count;
    
    SELECT COUNT(*) INTO rec_count FROM dashboard_metrics;
    RAISE NOTICE '‚úÖ Vista dashboard_metrics: % registros', rec_count;
END $$;

-- =====================================================
-- RESUMEN FINAL
-- =====================================================
\echo 'üìä RESUMEN DE VALIDACI√ìN'

DO $$
DECLARE
    table_count INTEGER;
    view_count INTEGER;
    function_count INTEGER;
    trigger_count INTEGER;
    policy_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO table_count 
    FROM information_schema.tables 
    WHERE table_schema = 'public' AND table_type = 'BASE TABLE';
    
    SELECT COUNT(*) INTO view_count 
    FROM information_schema.views 
    WHERE table_schema = 'public';
    
    SELECT COUNT(*) INTO function_count 
    FROM information_schema.routines 
    WHERE routine_schema = 'public' AND routine_type = 'FUNCTION';
    
    SELECT COUNT(*) INTO trigger_count 
    FROM information_schema.triggers 
    WHERE trigger_schema = 'public' AND trigger_name NOT LIKE 'RI_%';
    
    SELECT COUNT(*) INTO policy_count 
    FROM pg_policies 
    WHERE schemaname = 'public';
    
    RAISE NOTICE '';
    RAISE NOTICE '===========================================';
    RAISE NOTICE 'üéâ VALIDACI√ìN COMPLETADA';
    RAISE NOTICE '===========================================';
    RAISE NOTICE 'üìã Tablas creadas: %', table_count;
    RAISE NOTICE 'üëÅÔ∏è  Vistas creadas: %', view_count;
    RAISE NOTICE 'üîß Funciones creadas: %', function_count;
    RAISE NOTICE '‚ö° Triggers activos: %', trigger_count;
    RAISE NOTICE 'üõ°Ô∏è  Pol√≠ticas RLS: %', policy_count;
    RAISE NOTICE '';
    
    IF table_count >= 14 AND view_count >= 4 AND function_count >= 5 THEN
        RAISE NOTICE '‚úÖ TODAS LAS MIGRACIONES SE EJECUTARON CORRECTAMENTE';
        RAISE NOTICE 'üöÄ Base de datos lista para uso en producci√≥n';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  ALGUNOS COMPONENTES PODR√çAN ESTAR FALTANDO';
        RAISE NOTICE 'üîç Revisar logs anteriores para identificar problemas';
    END IF;
    
    RAISE NOTICE '===========================================';
END $$;

-- Verificaci√≥n final con timestamp
SELECT 
    'üéØ Validaci√≥n completada' as mensaje,
    CURRENT_TIMESTAMP as timestamp,
    current_user as ejecutado_por,
    version() as postgresql_version;